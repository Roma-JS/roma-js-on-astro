---
import '../styles/main.scss';
import styles from '../styles/wallpaper.module.scss';
import '../styles/layouts/hp.scss';
import BaseHead from '@components/BaseHead.astro';
import BrandLogo from '@components/BrandLogo/BrandLogo.astro';
import { BuildInfo } from '@components/BuildInfo/BuildInfo';
import type { Props as BaseHeadProps } from '@components/BaseHead.astro';
import { Navbar } from '@components/Navbar/Navbar';
import type { Lang } from '@i18n/types';
import { getCanonicalURL, socialLinks } from 'utils/routing';
import { getNavbarMessages } from '@components/Navbar/helpers';
import { SocialLinksList } from '@components/SocialLinksList/SocialLinksList';
import { CFPCta } from '@components/CFPCta/CFPCta';
import type { HpContent } from '../@types/hp';
import { ClientRouter } from 'astro:transitions';
import { h1HeadingDomId } from 'utils/a11y';
import { SkipToMainContent } from '@components/SkipToMainContent/SkipToMainContent';
import eventsMetadata from '../data/events/events-metadata.json';
import { createSlug } from 'utils/blog';
import { createTranslate } from '@i18n/translate';

export interface Props extends BaseHeadProps {
  lang: Lang;
  urlMap?: Partial<Record<Lang, string>>;
  sections: HpContent['sections'];
}

const {
  title,
  description,
  lang = 'en',
  urlMap,
  sections,
} = Astro.props as Props;

const canonicalURL = getCanonicalURL(Astro);
const hrefByEventSlug: Record<string, string | undefined> =
  eventsMetadata.hrefByEventSlug;
const relativePageUrl =
  canonicalURL.pathname.replace(/([^/]+)\/$/g, '$1') +
  canonicalURL.search +
  canonicalURL.hash;

const l10n = await createTranslate(lang);
---

<html lang={lang} class="rmjs-yellow-black-theme">
  <head>
    <BaseHead title={title} description={description} />
    <slot name="head" />
    <ClientRouter />
  </head>

  <body class={styles.wallpaper}>
    <main class="main">
      <SkipToMainContent
        client:load
        targetId={h1HeadingDomId}
        label={l10n('skipToMainContent')}
      />
      <Navbar
        client:load
        lang={lang}
        urlMap={urlMap}
        relativePageUrl={relativePageUrl}
        messages={getNavbarMessages(l10n)}
      />
      <div class="hp-wrapper">
        <section class="hp-section logo-hero">
          <BrandLogo class="logo" />
          <div class="logo-hero__text hero">
            <h1 id={h1HeadingDomId} tabindex="-1" class="h-1">{title}</h1><span
              class="h-1">{description}</span
            >
          </div>
          <a
            class="btn btn-secondary slack-link h-1"
            rel="noopener noreferrer"
            target="_blank"
            href={socialLinks.discord.href}
          >
            {l10n('ctaJoinDiscordCta')}{' '}
            <img
              width="24"
              height="24"
              src={socialLinks.discord.iconHref.src}
              alt=""
              aria-hidden="true"
            />
          </a>
        </section>
        {
          sections.map((section) => (
            <section class="arrow-box hp-section">
              <h2 class="h-2 h-dynamic">{section.heading}</h2>
              {section.body.map((body) => {
                const slug = createSlug(body);
                const href: string | undefined = hrefByEventSlug[slug];

                return (
                  <p class="h-2 h-dynamic">
                    {href ? (
                      <a class="hp-link" href={href}>
                        {body}
                      </a>
                    ) : (
                      body
                    )}
                  </p>
                );
              })}
              {section.startDate && (
                <time
                  class="h-2 h-dynamic"
                  datetime={section.startDate.dateTime}
                >
                  {section.startDate.label}
                </time>
              )}
              <div class="hp-section-links">
                {!!section.cta && (
                  <a
                    class="btn btn-outline btn-tertiary"
                    href={section.cta.href}
                    hreflang={section.cta.lang || undefined}
                  >
                    {section.cta.text}
                  </a>
                )}
                {!!section.venue && (
                  <a
                    class="btn btn-outline btn-tertiary"
                    href={section.venue.href}
                    hreflang={section.venue.lang || undefined}
                  >
                    {section.venue.text}
                  </a>
                )}
              </div>
            </section>
          ))
        }
      </div>
      <slot />
      <div class="cfp-wrapper">
        <p class="h-2">
          <CFPCta
            style={{
              '--cta-bg': 'var(--text-secondary)',
              '--cta-text': 'var(--text-primary)',
            }}>{l10n('ctaRequestTalk')}</CFPCta
          >
        </p>
      </div>
      <section class="contacts-cta">
        <p class="h-2">{l10n('ctaDiscussWebDev')}</p>
        <p class="h-2">{l10n('ctaSeePreviousTalks')}</p>
        <h2 class="h-1">{l10n('ctaContacts')}</h2>
      </section>
      <footer>
        <SocialLinksList />
      </footer>
    </main>
    <slot name="after" />
    <BuildInfo />
  </body>
</html>
