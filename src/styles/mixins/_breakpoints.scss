@use 'sass:map';

// Partially lifted from https://github.com/twbs/bootstrap/blob/8de048833049f8b6af2c07df2d44d98c1ee095db/scss/mixins/_breakpoints.scss

$xs: 0;
$sm: 576px;
$md: 768px;
$lg: 1024px;
$xl: 1200px;
$xxl: 1400px;

/* Same as bootstrap 5 but `lg` is not `992px` */
$breakpoints: (
  xs: $xs,
  sm: $sm,
  md: $md,
  lg: $lg,
  xl: $xl,
  xxl: $xxl,
);

@mixin assert-valid-breakpoint($name) {
  @if map.get($breakpoints, $name) == null {
    @error "#{$name} is not a valid breakpoint. Expected one of #{map-keys($breakpoints)}";
  }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
@function breakpoint-max($name) {
  $max: map.get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name) {
  @include assert-valid-breakpoint($name);

  $min: breakpoint-min($name);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name) {
  @include assert-valid-breakpoint($name);

  $max: breakpoint-max($name);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper) {
  @include assert-valid-breakpoint($lower);
  @include assert-valid-breakpoint($upper);

  $min: breakpoint-min($lower);
  $max: breakpoint-max($upper);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin breakpoints-as-css-properties {
  @each $name, $value in $breakpoints {
    --breakpoint-#{$name}: #{map.get($breakpoints, $name)};
  }
}
